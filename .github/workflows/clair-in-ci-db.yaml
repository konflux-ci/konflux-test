name: Clair in CI DB - test

# This workflow tests latest database version of clair-in-ci and
# pushes it to app-studio registry in case all tests passed

on:
  repository_dispatch:
    types: trigger_workflow
    paths:
      - clair-in-ci/**
      - .github/workflows/clair-in-ci-db.yaml

env:
  REGISTRY: quay.io/redhat-appstudio
  IMAGE_NAME: clair-test-build
  LATEST_TAG: latest
  PREVIOUS_TAG: previous
  TO_TEST: to_test

jobs:
  test-and-push:
    name: Test and push image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Dockerfile linter
        if: ${{ github.event_name == 'pull_request' }}  # don't break regular rebuilds if linter is updated
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: clair-in-ci/Dockerfile
          ignore: DL3041
          
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2.2.0
        if: ${{ github.event_name != 'pull_request' }}  # don't login from PR; secrets are not passed to PRs from fork
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HACBS_TEST_QUAY_USER }}
          password: ${{ secrets.HACBS_TEST_QUAY_TOKEN }}

      - name: Setup docker for workflow
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Pull-and-retag-image
        if: ${{ github.event_name != 'pull_request' }}  # don't retag image from PR
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PREVIOUS_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PREVIOUS_TAG }}
          docker rmi -f $(docker images -q)

      - name: Get Clair version
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_TEST }}
          docker run --rm -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_TEST }} clair-action --version

      - name: Check Clair output format
        run: |
          # test real life usage of clair
          mkdir results
          docker run --rm -v $(pwd)/results:/results:rw -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_TEST }} bash -c 'clair-action report --image-ref=registry.access.redhat.com/ubi9-minimal --db-path=/tmp/matcher.db --format=quay > /results/clairdata.json'


          # check if required metadata and path to values are the same as expected
          jq -e '.data[].Features[0] | select(has("Name") and has("Vulnerabilities")) or error("Required keys do not exist")' results/clairdata.json

      - name: Retag-and-push-to-${{ env.REGISTRY }}
        if: ${{ github.event_name != 'pull_request' }}  # don't push image from PR
        id: push-image
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_TEST }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
